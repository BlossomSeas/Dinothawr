// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
input_dummy _IN1;
vec4 _r0006;
attribute vec4 VertexCoord;
attribute vec4 COLOR;
varying vec4 COL0;
attribute vec4 TexCoord;
varying vec4 TEX0;
varying vec4 TEX2;
 

mat4 transpose_(mat4 matrix)
{
   mat4 ret;
   for (int i = 0; i != 4; i++)
      for (int j = 0; j != 4; j++)
         ret[i][j] = matrix[j][i];

   return ret;
}
         
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec4 _oColor;
    vec2 _oTex;
    vec2 _omega;
    _r0006.x = dot(MVPMatrix_[0], VertexCoord);
    _r0006.y = dot(MVPMatrix_[1], VertexCoord);
    _r0006.z = dot(MVPMatrix_[2], VertexCoord);
    _r0006.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0006;
    _oColor = COLOR;
    _oTex = TexCoord.xy;
    _omega = 6.28318548E+00*TextureSize;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX2.xy = _omega;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
vec3 _TMP2;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec3 _x0015;
varying vec4 TEX2;
varying vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec2 _angle;
    float _yfactor;
    vec3 _xfactors;
    vec3 _color;
    _TMP0 = texture2D(Texture, TEX0.xy);
    _angle = TEX0.xy*TEX2.xy;
    _TMP1 = sin(_angle.y);
    _yfactor = (1.60000000E+01 + _TMP1)/1.70000000E+01;
    _x0015 = _angle.x + vec3( 1.57079637E+00, -5.23598850E-01, -2.61799407E+00);
    _TMP3 = sin(_x0015.x);
    _TMP4 = sin(_x0015.y);
    _TMP5 = sin(_x0015.z);
    _TMP2 = vec3(_TMP3, _TMP4, _TMP5);
    _xfactors = (4.00000000E+00 + _TMP2)/5.00000000E+00;
    _color = (_yfactor*_xfactors)*_TMP0.xyz;
    _ret_0 = vec4(_color.x, _color.y, _color.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
#endif
