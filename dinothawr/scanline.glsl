// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     float _frame_rotation;
varying     vec2 _omega;
struct sine_coord {
    vec2 _omega;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
input_dummy _IN1;
vec4 _r0005;
attribute vec4 VertexCoord;
attribute vec4 COLOR;
varying vec4 COL0;
attribute vec4 TexCoord;
varying vec4 TEX0;
varying vec4 TEX2;
 

mat4 transpose_(mat4 matrix)
{
   mat4 ret;
   for (int i = 0; i != 4; i++)
      for (int j = 0; j != 4; j++)
         ret[i][j] = matrix[j][i];

   return ret;
}
         
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec4 _oColor;
    vec2 _oTex;
    sine_coord _coords;
    _r0005.x = dot(MVPMatrix_[0], VertexCoord);
    _r0005.y = dot(MVPMatrix_[1], VertexCoord);
    _r0005.z = dot(MVPMatrix_[2], VertexCoord);
    _r0005.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0005;
    _oColor = COLOR;
    _oTex = TexCoord.xy;
    _coords._omega = vec2((3.14150000E+00*OutputSize.x*TextureSize.x)/InputSize.x, 6.28299999E+00*TextureSize.y);
    gl_Position = _r0005;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX2.xy = _coords._omega;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     float _frame_rotation;
varying     vec2 _omega;
struct sine_coord {
    vec2 _omega;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
float _TMP2;
vec2 _TMP1;
float _TMP4;
float _TMP3;
vec4 _TMP0;
uniform sampler2D Texture;
vec2 _x0011;
vec2 _a0017;
varying vec4 TEX2;
varying vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec3 _scanline;
    _TMP0 = texture2D(Texture, TEX0.xy);
    _x0011 = TEX0.xy*TEX2.xy;
    _TMP3 = sin(_x0011.x);
    _TMP4 = sin(_x0011.y);
    _TMP1 = vec2(_TMP3, _TMP4);
    _a0017 = vec2( 5.00000007E-02, 1.50000006E-01)*_TMP1;
    _TMP2 = dot(_a0017, vec2( 1.00000000E+00, 1.00000000E+00));
    _scanline = _TMP0.xyz*(9.49999988E-01 + _TMP2);
    _ret_0 = vec4(_scanline.x, _scanline.y, _scanline.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
#endif
